rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isProjectMember(userId, projectRef) {
      return exists(/$(projectRef)/users/$(userId))
        || isOrganizationMember(userId, get(/$(projectRef)).data.organization);
    }

    function isOrganizationMember(userId, organizationRef) {
      return exists(/$(organizationRef)/users/$(userId));
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId;

      match /projects/{userId} {
        allow read: if request.auth.uid == userId;
      }
    }

    match /tickets/{ticketId} {
      allow read: if isProjectMember(request.auth.uid, resource.data.project);
      allow create: if isProjectMember(request.auth.uid, request.resource.data.project);
      allow update: if isProjectMember(request.auth.uid, resource.data.project);
    }
    
    match /ticketTags/{ticketTagId} {
      allow read: if isProjectMember(request.auth.uid, get(/$(resource.data.ticket)).data.project);
      allow create: if isProjectMember(request.auth.uid, get(/$(request.resource.data.ticket)).data.project);
    }

    match /params {
      match /ticketTag {
        allow read: if request.auth != null;
        allow update: if request.auth != null;
      }
    }
  }
}
